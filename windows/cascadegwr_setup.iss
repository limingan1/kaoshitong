; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "VDC-Link"
#define MyAppVersion "CloudVDC_20.1.13.26.SPC_Link"
#define MyAppExeName "checkdb.bat"
#define MyAppRunBat "install.bat"
#define MyAppRunBat1 "install1.bat"
#define MyAppPreInstallName "shutdown.bat"
#define MyAppUninstallName "uninstall.bat"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{36C58412-2EC9-4B80-996A-916B94CAFB4E}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
DefaultDirName={code:GetDefaultInstallRoot}\{#MyAppName}
DefaultGroupName={#MyAppName}
OutputDir=.\
OutputBaseFilename={#MyAppVersion}
;cascadegw-setup-update
Compression=lzma
SolidCompression=yes


[code]
var
  HaIpPage:TInputQueryWizardPage;
  HaPage:TInputOptionWizardPage;

function inet_pton(netType:Integer;ipString:PChar;addr:PChar): Integer; external 'inet_pton@{sys}\ws2_32.dll stdcall';

function IPIsValid(IP: string): Boolean;
var
  Buffer : String;
begin
  setlength(Buffer,255);
  Result := False
  if (inet_pton(2,PChar(IP),PChar(Buffer)) = 1) then
  begin
    Result := True;
  end
  else if (inet_pton(23,PChar(IP),PChar(Buffer)) = 1) then
  begin
    Result := True;
  end;
end;

function GetDefaultInstallRoot(Param: String): String;
begin
    if ((GetWindowsVersion shr 16) >= $0600) then
        Result := ExpandConstant('{userappdata}')
    else
        Result := ExpandConstant('{pf}');
end;

procedure CreateHaConfigPage();
begin
  HaPage := CreateInputOptionPage(wpInfoBefore,
    'Select Installation Type', '',
    'If you want install double hot standby model, please check the box below, then click Next.',
    False, False);
  // Add items
  HaPage.Add('Install double host standby model');
  // Set initial values (optional)
  HaPage.Values[0] := False;
end;

procedure CreateFloatingIpConfigPage();
begin
  // Create the page
  HaIpPage := CreateInputQueryPage(HaPage.ID,
    'Double hot standby Information', '',
    'Please input the floating ip address,then click Next.');
  // Add items (False means it's not a password edit)
  HaIpPage.Add('Floating Ip address:', False);
end;

function ShouldSkipPage(PageID: Integer): Boolean;
begin
  if (PageID = wpFinished) then
  begin
    Result := False
  end
  else if (HaIpPage.ID = PageID) then
  begin
    Result := (HaPage.Values[0] = False)
  end
end;

function NextButtonClick(CurPageID: Integer): Boolean;
begin
  Result := True
  if (CurPageID =HaIpPage.ID) then
  begin
    if (IPIsValid(HaIpPage.Values[0]) = False) then
    begin
      MsgBox('please input a valid ip address',mbInformation,MB_OK);
      Result := False
    end;
  end;
end;

procedure InitializeWizard();
begin
  CreateHaConfigPage;
  CreateFloatingIpConfigPage;
end;

procedure RunOtherInstaller;
var
  ResultCode: Integer;
begin
    if Exec(ExpandConstant('{app}\tools\{#MyAppPreInstallName}'), '', '', SW_SHOWNORMAL,ewWaitUntilTerminated, ResultCode) then
       begin
        Sleep(3000)
        if FileExists(ExpandConstant('{app}\tools\vdc.bmp')) then
        begin
            RenameFile(ExpandConstant('{app}\tools\vdc.bmp'),ExpandConstant('{app}\vdc.bmp'));
        end
        if FileExists(ExpandConstant('{app}\tools\vdc.jks')) then
        begin
            RenameFile(ExpandConstant('{app}\tools\vdc.jks'),ExpandConstant('{app}\vdc.jks'));
        end
        if FileExists(ExpandConstant('{app}\tools\vdc')) then
        begin
            RenameFile(ExpandConstant('{app}\tools\vdc'),ExpandConstant('{app}\vdc'));
        end
        if FileExists(ExpandConstant('{app}\tools\vdc-cert')) then
        begin
            RenameFile(ExpandConstant('{app}\tools\vdc-cert'),ExpandConstant('{app}\vdc-cert'));
        end
        if FileExists(ExpandConstant('{app}\tools\vdm-server')) then
        begin
            RenameFile(ExpandConstant('{app}\tools\vdm-server'),ExpandConstant('{app}\vdm-server'));
        end
        if FileExists(ExpandConstant('{app}\tools\cas')) then
        begin
            RenameFile(ExpandConstant('{app}\tools\cas'),ExpandConstant('{app}\cas'));
        end
        DelTree(ExpandConstant('{app}\tools'), False, True, True)
        DelTree(ExpandConstant('{app}\dual'), False, True, True)
        DelTree(ExpandConstant('{app}\jdk'), False, True, True)
        DelTree(ExpandConstant('{app}\admin.bat'), False, True, True)
       end
    else
        MsgBox('Server failed to stop!' + #13#10 + SysErrorMessage(ResultCode), mbError, MB_OK);
end;

procedure RunDualInit;
var
  ResultCode: Integer;
begin

    if (HaPage.Values[0]) then
    begin
        Exec(ExpandConstant('{app}\dual\addUser.bat'), '', '', SW_SHOWNORMAL,ewWaitUntilTerminated, ResultCode)
        Exec(ExpandConstant('{app}\dual\shareFolder.bat'), '', '', SW_SHOWNORMAL,ewWaitUntilTerminated, ResultCode)
        Exec(ExpandConstant('{app}\tools\{#MyAppRunBat1}'), '', '', SW_SHOWNORMAL,ewWaitUntilTerminated, ResultCode)
    end
    else
    begin
        ShellExec('runas',ExpandConstant('{app}\tools\{#MyAppRunBat}'), 'goto :st', '', SW_SHOWNORMAL,ewWaitUntilTerminated, ResultCode)
    end;

end;


procedure CheckDBInit;
var
  ResultCode: Integer;
begin
    if (HaPage.Values[0]) then
    begin
        Exec(ExpandConstant('{app}\tools\checkdb1.bat'), '', '', SW_SHOWNORMAL,ewWaitUntilTerminated, ResultCode)
    end
    else
    begin
        ShellExec('runas',ExpandConstant('{app}\tools\checkdb.bat'), 'goto :st', '', SW_SHOWNORMAL,ewWaitUntilTerminated, ResultCode)
    end;
end;

procedure cpFile;
var
  ResultCode: Integer;
begin
    if FileExists(ExpandConstant('{app}\vdc.bmp')) then
    begin
        DeleteFile(ExpandConstant('{app}\tools\vdc.bmp'));
        RenameFile(ExpandConstant('{app}\vdc.bmp'),ExpandConstant('{app}\tools\vdc.bmp'));
    end
    if FileExists(ExpandConstant('{app}\vdc.jks')) then
    begin
        RenameFile(ExpandConstant('{app}\vdc.jks'),ExpandConstant('{app}\tools\vdc.jks'));
    end
    if FileExists(ExpandConstant('{app}\vdc')) then
    begin
        RenameFile(ExpandConstant('{app}\vdc'),ExpandConstant('{app}\tools\vdc'));
    end
    if FileExists(ExpandConstant('{app}\vdc-cert')) then
    begin
        RenameFile(ExpandConstant('{app}\vdc-cert'),ExpandConstant('{app}\tools\vdc-cert'));
    end
    if FileExists(ExpandConstant('{app}\vdm-server')) then
    begin
        RenameFile(ExpandConstant('{app}\vdm-server'),ExpandConstant('{app}\tools\vdm-server'));
    end
    if FileExists(ExpandConstant('{app}\cas')) then
    begin
        RenameFile(ExpandConstant('{app}\cas'),ExpandConstant('{app}\tools\cas'));
    end
end;

procedure RunInitInstall;
var
  ResultCode: Integer;
begin
    cpFile;
    CheckDBInit;
    RunDualInit;
end;

procedure OpenApp;
var
  ResultCode: Integer;
begin
    shellexec('', ExpandConstant('{app}\tools\checkconfig.bat'),'', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
    SetIniString('systemCfg', 'cas.database.db_type','sqlserver', ExpandConstant('{app}/config/application-top.properties'));
;   SetIniString('systemCfg', 'version','versionReplace', ExpandConstant('{app}/config/application-top.properties'));
    if (HaPage.Values[0]) then
    begin
      SetIniString('systemCfg', 'cas.database.dual_computer_enable','true', ExpandConstant('{app}/config/application-top.properties'));
      SetIniString('systemCfg', 'cas.floating_ip', HaIpPage.Values[0], ExpandConstant('{app}/config/application-top.properties'));
    end
    shellexec('', ExpandConstant('{app}\tools\deal_config.bat'),'', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
end;


[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

;[installDelete]
;Type: filesandordirs; Name:"{app}\lib";
;Type: filesandordirs; Name:"{app}\tools";
;Type: filesandordirs; Name:"{app}\WebRoot";
;Type: filesandordirs; Name:"{app}\persistent";

[Files]
Source: ".\tools\shutdown.bat"; DestDir: "{app}\tools"; AfterInstall: RunOtherInstaller; Flags: ignoreversion recursesubdirs createallsubdirs
Source: ".\tools\*"; DestDir: "{app}\tools"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: ".\dual\*"; DestDir: "{app}\dual"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: ".\tools\uninstall.bat"; DestDir: "{app}\tools"; Flags: ignoreversion recursesubdirs createallsubdirs   uninsneveruninstall
Source: ".\logs"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: ".\jdk\*"; DestDir: "{app}\jdk"; Flags: ignoreversion recursesubdirs createallsubdirs onlyifdoesntexist
Source: ".\config\application-top.properties"; DestDir: "{app}\config"; Flags: onlyifdoesntexist ignoreversion recursesubdirs createallsubdirs
Source: ".\config\config.properties"; DestDir: "{app}\config"; Flags: onlyifdoesntexist ignoreversion recursesubdirs createallsubdirs
Source: ".\setup\*"; DestDir: "{app}\setup"; AfterInstall: OpenApp; Flags: ignoreversion recursesubdirs createallsubdirs
Source: ".\cascadegwr3.0.jar"; DestDir: "{app}"; AfterInstall: RunInitInstall; Flags: ignoreversion recursesubdirs createallsubdirs


[Run]

[installDelete]
Type: filesandordirs; Name:"{app}\unins*.*";

[UninstallRun]
Filename: "{app}\tools\{#MyAppUninstallName}";

[UninstallDelete]
Type: filesandordirs; Name: {app}\logs
Type: filesandordirs; Name: {app}\config
Type: filesandordirs; Name: {app}\VDC.txt